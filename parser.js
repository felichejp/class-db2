const wkx = require('wkx');
const { Buffer } = require('buffer');  // Forma moderna de importar Buffer

const wkbArray = [
  '0102000020110F00000600000058AA8394B57C65C1913551EBB00E414166ADF0F6B37C65C194498B93B00E4141E89BD799B27C65C12E678157AE0E4141E8BB2866AC7C65C1E8E8AB91990E41410FBAE68DA57C65C1E7CB051A810E414138F6EC8CA07C65C1F689622D700E4141',
  '0102000020110F00000D000000BFCDD0BF4F7D65C19562F7ED330F4141E03929344C7D65C1305B7A0E310F414105310F88427D65C177EEE7612A0F4141A13BE2EE417D65C166B6F8F7290F4141FDBEFAA03F7D65C1C12B0538280F414166866C803B7D65C17AD8CF06250F4141856E95F42A7D65C175ED1115160F4141FBF67A33247D65C19FEF9A8F100F4141EE813FA41D7D65C17CC8EE9A0D0F4141B90BE24A0F7D65C1EF5377130A0F4141FE5958460A7D65C1CA3AE460090F4141CDD159C8077D65C18BAE9A07090F41413314CC69007D65C1D3CFB615070F4141'
];

const pointsArrays = wkbArray.map(wkbHex => {
  const geometry = wkx.Geometry.parse(Buffer.from(wkbHex, 'hex'));  // Usando Buffer.from()
  return geometry.points.map(p => [p.x, p.y]);
});

console.log(pointsArrays);